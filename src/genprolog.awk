# Generates prolog file from compose.awk output
# loriacarlos@gmail.com
# compose_output/composed_plan.txt --> prolog_output/study_plan.pl
# To run
# awk -f src/prolog.awk output/composed_plan.txt > prolog_output/study_plan.pl
BEGIN {
	FS = "::";
	columnas = 7;
	printf "%%%%% Study Plan %%%%%\n";
	printf ":- discontiguous course/1.\n";
	printf ":- discontiguous course/8.\n";
	printf ":- discontiguous course_req/2.\n";
}
# Expected input record format generated by compose
# nn::code::description::credits[2345](::req)*::(bsc|dipl)::(level|_)::(cycle|_)
# req ~ EI(F|G)...O? | LIX...

#Funcion que pasa de numero romano a natural. Y contempla la excepcion de no valor
function traduceNumero(romano){
    switch (romano){
	case "I":
		numero = 1;
		break;
	case "II":
		numero = 2;
		break;
	case "III":
		numero = 3;
		break;
	case "IV":
		numero = 4;
		break;
	case "_":
		numero = "none";
		break;
	default:
		break;
    }
    return numero;
}

#Unica regla. Aplica para todas las lineas del archivo.
{
	#Encabezado del curso
	printf "% --- '"; 
	printf "%s' ---\n", $2;
	printf "course('%s').\n", $2;

	#Determinar ciclo y nivel
	ciclo = traduceNumero($(NF));
	nivel = traduceNumero($(NF-1));
	
	#Extrae el plan
	plan = $(NF-2);
	
	#Determina si es Regular u Opcional
	if($2~/O$/){
		tipo = "optional";
	}else{
		tipo = "regular";
	}
	
	#Crea la lista de atributos del curso.
	printf "course('%s', %s, %s, %s, %s, %s, %s, %s).\n", $2, $1, tipo, plan, $4, nivel, ciclo, $3;
	
	#Imprime los requisitos
	tam=NF;
	tamN=tam-3; 
	if(tam>=8){
		num=5;
		do {
	   		printf "course_req('%s', '%s').\n", $2, $num;
	   		num++;
    		} while (num <= tamN);
    	}
	
}
END{
}